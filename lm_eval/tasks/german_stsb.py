"""
Semantic textual similarity dataset, which is a translation of the English STS-b dataset. (http://ixa2.si.ehu.eus/stswiki/index.php/STSbenchmark) 
collected from three domains: news headlines, image captions and user forums

Git:https://github.com/t-systems-on-site-services-gmbh/german-STSbenchmark
"""
import datasets
from lm_eval.base import Task, rf
from lm_eval.metrics import mean
from functools import partial
import numpy as np
from scipy import stats

_CITATION = """"""

def _stsb_agg_pearsonr(key, items):
    references, predictions = zip(*items)
    pearsonr_coefficient, p_value = stats.pearsonr(references, predictions)
    return pearsonr_coefficient
#     precision_metric = datasets.load_metric("precision")
#     return precision_metric.compute(references=references,
#                                     predictions=predictions, average='macro',
#                                     labels= np.unique(predictions))[key]

def _stsb_agg_spearmanr(key, items):
    references, predictions = zip(*items)
    spearmanr_coefficient, p_value = stats.spearmanr(references, predictions)
    return spearmanr_coefficient
#     recall_metric = datasets.load_metric("recall")
#     return recall_metric.compute(references=references,
#                                  predictions=predictions, average='macro',
#                                  labels= np.unique(predictions))[key]


class GERMAN_STSB(Task):
    VERSION = 0
    DATASET_PATH = "stsb_multi_mt"
    DATASET_NAME = 'de'

    def has_training_docs(self):
        return True

    def has_validation_docs(self):
        return True

    def has_test_docs(self):
        return True
      
    def training_docs(self):
        if self.has_training_docs():
             return self.dataset["train"]

    def validation_docs(self):
        if self.has_validation_docs():
             return self.dataset["validation"]
            
    def test_docs(self):
        if self.has_test_docs():
             return self.dataset["test"]
          
    def doc_to_text(self, doc): 
        return "Satz 1: {}\nSatz 2: {}\nFrage: Auf einer Skala von 1 bis 5, wie Ã¤hnlich sind Satz 1 und Satz 2?\nAntwort:".format(
            doc["sentence1"],
            doc["sentence2"],
        )

    def doc_to_target(self, doc):
        return " {}".format(doc["similarity_score"])

    def construct_requests(self, doc, ctx):
        """Uses RequestFactory to construct Requests and returns an iterable of
        Requests which will be sent to the LM.

        :param doc:
            The document as returned from training_docs, validation_docs, or
            test_docs.
        :param ctx: str
            The context string, generated by fewshot_context. This includes the natural
            language description, as well as the few shot examples, and the question
            part of the document for `doc`.
        """
        print('ctx: #####', ctx)
        continuation = rf.greedy_until(ctx, ['\n'])
        print('continuation:######:', continuation)
        return continuation

    def process_results(self, doc, results):
        """Take a single document and the LM results and evaluates, returning a
        dict where keys are the names of submetrics and values are the values of
        the metric for that one document

        :param doc:
            The document as returned from training_docs, validation_docs, or test_docs.
        :param results:
            The results of the requests created in construct_requests.
        """
        print(results)
        results =  [0 for x in results if x=='']
        pred = [int(x) for x in results]
                      
        true_label = int(doc["similarity_score"])
        
        return {"perasonr":(true_label, pred), "spearmanr":(true_label, pred)}

    def aggregation(self):
        """
        :returns: {str: [metric_score] -> float}
            A dictionary where keys are the names of submetrics and values are
            functions that aggregate a list of metric scores
        """
        return {"perasonr": partial(_stsb_agg_pearsonr, "pearsonr"),
                "spearmanr": partial(_stsb_agg_spearmanr, "spearmanr")}

    def higher_is_better(self):
        return {"perasonr":True, "spearmanr":True}
    